import pandas as pd
import streamlit as st
from openai import OpenAI
from gtts import gTTS
import tempfile
import matplotlib.pyplot as plt

# -----------------------------
# Inicializa√ß√£o
# -----------------------------
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
st.set_page_config(page_title="IA Leitora de Planilhas - Pontuar tech", layout="wide")

st.title("üìä IA Leitora de Planilhas - Pontuar tech")
st.markdown(
    "Siga os passos: 1Ô∏è‚É£ Carregue sua planilha ‚Üí 2Ô∏è‚É£ Informe o tipo ‚Üí 3Ô∏è‚É£ Fa√ßa sua pergunta ‚Üí 4Ô∏è‚É£ Veja e ou√ßa a resposta!"
)

# -----------------------------
# Sess√£o de hist√≥rico e contadores
# -----------------------------
if "historico" not in st.session_state:
    st.session_state["historico"] = []

if "respostas_uteis" not in st.session_state:
    st.session_state["respostas_uteis"] = 0

if "nao_util" not in st.session_state:
    st.session_state["nao_util"] = False

if "info_adicional" not in st.session_state:
    st.session_state["info_adicional"] = ""

if "tipo_planilha" not in st.session_state:
    st.session_state["tipo_planilha"] = ""

# -----------------------------
# Upload da planilha
# -----------------------------
uploaded_file = st.file_uploader("üìÇ Carregue sua planilha Excel (.xlsx)", type=["xlsx"])

if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("‚úÖ Planilha carregada com sucesso!")
    except Exception:
        st.error("‚ùå N√£o foi poss√≠vel ler o arquivo. Certifique-se de que √© um .xlsx v√°lido.")
        st.stop()

    # -----------------------------
    # Tipo da planilha
    # -----------------------------
    st.subheader("üóÇ Sobre o que se trata esta planilha?")
    tipo_planilha = st.text_input(
        "Ex.: gastos, vendas, estoque, despesas...", st.session_state.get("tipo_planilha", "")
    )
    if tipo_planilha:
        st.session_state["tipo_planilha"] = tipo_planilha

    # -----------------------------
    # Detectar colunas financeiras
    # -----------------------------
    def detectar_colunas_financeiras(df):
        keywords = ["gasto", "valor", "custo", "pre√ßo", "despesa", "total"]
        colunas_financeiras = [
            col for col in df.columns if any(k.lower() in col.lower() for k in keywords)
        ]
        # Adiciona colunas num√©ricas que parecem monet√°rias
        for col in df.select_dtypes(include="number").columns:
            if df[col].max() > 0 and col not in colunas_financeiras:
                colunas_financeiras.append(col)
        return colunas_financeiras

    col_financeiras = detectar_colunas_financeiras(df)
    st.sidebar.subheader("üí∞ Colunas financeiras detectadas")
    st.sidebar.write(col_financeiras)

    # Permitir que o usu√°rio confirme/ajuste colunas financeiras
    col_financeiras_ajustadas = st.multiselect(
        "Selecione as colunas financeiras relevantes:", options=df.columns, default=col_financeiras
    )

    # -----------------------------
    # FAQ na barra lateral
    # -----------------------------
    st.sidebar.title("‚ùì Perguntas Frequentes")
    perguntas_frequentes = [
        "Qual foi o gasto mais alto?",
        "Qual √© a m√©dia de gastos?",
        "Qual √© o gasto mais baixo?",
        "Resumo geral da planilha",
        "Qual produto/vendedor mais gerou gasto?"
    ]
    for p in perguntas_frequentes:
        if st.sidebar.button(p):
            st.session_state["pergunta"] = p

    # Bot√£o de limpar hist√≥rico
    if st.sidebar.button("üóë Limpar Hist√≥rico"):
        st.session_state["historico"] = []
        st.session_state["respostas_uteis"] = 0
        st.success("‚úÖ Hist√≥rico limpo!")

    st.sidebar.metric("Respostas √∫teis", st.session_state["respostas_uteis"])

    # -----------------------------
    # Caixa de pergunta
    # -----------------------------
    pergunta = st.text_input("üí¨ Fa√ßa sua pergunta:", st.session_state.get("pergunta", ""))
    tipo_resposta = st.radio("Escolha o tipo de resposta:", ["Resumo simples", "Detalhes adicionais"], index=0)

    if st.button("üîç Perguntar") and pergunta and tipo_planilha:
        # -----------------------------
        # Preparar resumo da planilha
        # -----------------------------
        colunas = df.dtypes.apply(lambda x: str(x)).to_dict()
        df_normalizado = df.copy()
        # Normaliza valores monet√°rios
        for col in col_financeiras_ajustadas:
            df_normalizado[col] = pd.to_numeric(df_normalizado[col], errors="coerce").fillna(0)

        estatisticas_numericas = df_normalizado.describe().to_dict()
        estatisticas_categoricas = df_normalizado.select_dtypes(include=["object", "category"]).describe().to_dict()
        amostra = df_normalizado.head(20).to_dict(orient="records")

        resumo = {
            "tipo_planilha": tipo_planilha,
            "colunas": colunas,
            "colunas_financeiras": col_financeiras_ajustadas,
            "estatisticas_num√©ricas": estatisticas_numericas,
            "estatisticas_categoricas": estatisticas_categoricas,
            "amostra": amostra,
            "info_adicional": st.session_state.get("info_adicional", "")
        }

        # -----------------------------
        # Prompt otimizado para an√°lise objetiva
        # -----------------------------
        prompt_system = (
            "Voc√™ √© um assistente especialista em an√°lise de planilhas, com foco em gastos e valores monet√°rios.\n"
            "Regras obrigat√≥rias:\n"
            "1. Responda apenas com base nos dados fornecidos no resumo da planilha.\n"
            "2. Se a resposta n√£o estiver nos dados, diga exatamente: 'N√£o encontrado na planilha'.\n"
            "3. Nunca invente dados, colunas ou valores que n√£o existam.\n"
            "4. Foque nas colunas financeiras para an√°lise de gastos.\n"
            "5. Organize a resposta em duas partes:\n"
            "   - Resumo simples ‚Üí frase curta destacando o gasto mais relevante.\n"
            "   - Detalhes adicionais ‚Üí an√°lise completa: total, m√°ximo, m√≠nimo, m√©dia, compara√ß√µes, padr√µes e sugest√µes pr√°ticas.\n"
            "6. Se os dados forem insuficientes, explique o que faltou para responder.\n"
            "7. Sempre explique em linguagem clara e objetiva."
        )

        # -----------------------------
        # Chamada √† API OpenAI
        # -----------------------------
        resposta = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": prompt_system},
                {"role": "user", "content": f"Resumo da planilha:\n{resumo}\n\nPergunta: {pergunta}"}
            ]
        )

        texto_completo = resposta.choices[0].message.content

        # -----------------------------
        # Separar resumo e detalhes
        # -----------------------------
        if "Resumo simples:" in texto_completo and "Detalhes adicionais:" in texto_completo:
            resumo_simples = texto_completo.split("Resumo simples:")[1].split("Detalhes adicionais:")[0].strip()
            detalhes = texto_completo.split("Detalhes adicionais:")[1].strip()
        else:
            resumo_simples = texto_completo
            detalhes = texto_completo

        resposta_final = resumo_simples if tipo_resposta == "Resumo simples" else detalhes

        # -----------------------------
        # Mostrar resposta
        # -----------------------------
        st.subheader("‚úÖ Resposta:")
        st.write(resposta_final)

        # -----------------------------
        # Feedback
        # -----------------------------
        st.subheader("Feedback da resposta")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëç Resposta √∫til"):
                st.session_state["respostas_uteis"] += 1
                st.success(f"Resposta marcada como √∫til! Total: {st.session_state['respostas_uteis']}")
                st.session_state["historico"].append(
                    {"pergunta": pergunta, "resposta": resposta_final, "tipo": tipo_resposta, "util": True, "motivo": ""}
                )

        with col2:
            if st.button("üëé Resposta n√£o √∫til"):
                st.session_state["nao_util"] = True

        # -----------------------------
        # Solicitar mais informa√ß√µes se n√£o √∫til
        # -----------------------------
        if st.session_state["nao_util"]:
            motivo = st.text_input("‚ùå Informe o motivo da resposta n√£o ser √∫til:")
            info_adicional = st.text_area(
                "üìù Forne√ßa mais informa√ß√µes sobre a planilha (colunas relevantes, contexto, moeda, per√≠odo, etc.):"
            )
            if motivo and info_adicional:
                st.warning("Obrigado pelo feedback! Registramos sua resposta e informa√ß√µes adicionais.")
                st.session_state["historico"].append(
                    {
                        "pergunta": pergunta,
                        "resposta": resposta_final,
                        "tipo": tipo_resposta,
                        "util": False,
                        "motivo": motivo
                    }
                )
                st.session_state["info_adicional"] = info_adicional
                st.session_state["nao_util"] = False

        # -----------------------------
        # Leitura em voz (gTTS seguro)
        # -----------------------------
        if resposta_final.strip():
            try:
                tts = gTTS(text=resposta_final, lang='pt')
                with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
                    tts.save(fp.name)
                    st.audio(fp.name, format="audio/mp3")
            except Exception as e:
                st.warning(f"N√£o foi poss√≠vel gerar √°udio: {e}")
        else:
            st.info("üó£ Nenhum texto para gerar √°udio.")

    # -----------------------------
    # Gr√°ficos e resumo visual
    # -----------------------------
    st.subheader("üìä Visualiza√ß√µes")
    col_graf, col_visual = st.columns(2)

    with col_graf:
        if st.button("üìà Gerar gr√°fico dos dados"):
            numeric_cols = df.select_dtypes(include="number").columns
            if len(numeric_cols) > 0:
                fig, ax = plt.subplots()
                df[numeric_cols].sum().sort_values().plot(kind="bar", ax=ax, color="skyblue")
                ax.set_ylabel("Valores")
                ax.set_title("Soma por coluna num√©rica")
                st.pyplot(fig)
            else:
                st.info("Nenhuma coluna num√©rica para mostrar gr√°fico.")

    with col_visual:
        if st.button("üé® Resumo visual simplificado"):
            numeric_cols = df.select_dtypes(include="number").columns
            if len(numeric_cols) > 0:
                fig, ax = plt.subplots()
                df[numeric_cols].mean().sort_values().plot(kind="bar", ax=ax, color="lightgreen")
                ax.set_ylabel("M√©dia por coluna")
                ax.set_title("Resumo visual simplificado")
                st.pyplot(fig)
                st.write("Esse gr√°fico mostra a m√©dia de cada coluna num√©rica da planilha de forma simples.")
            else:
                st.info("Nenhuma coluna num√©rica para gerar resumo visual.")

# -----------------------------
# Hist√≥rico de perguntas
# -----------------------------
if st.session_state.get("historico"):
    st.subheader("üìú Hist√≥rico de Perguntas (√∫ltimas 10)")
    for h in reversed(st.session_state["historico"][-10:]):
        st.markdown(f"**Pergunta:** {h['pergunta']}")
        st.markdown(f"**Tipo de resposta:** {h['tipo']}")
        st.markdown(f"**Resposta:** {h['resposta']}")
        if not h["util"]:
            st.markdown(f"**Motivo n√£o √∫til:** {h['motivo']}")
        st.markdown("---")
