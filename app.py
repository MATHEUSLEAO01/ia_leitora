import pandas as pd
import streamlit as st
from openai import OpenAI
from gtts import gTTS
import tempfile
import matplotlib.pyplot as plt

# -----------------------------
# Inicializa√ß√£o
# -----------------------------
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
st.set_page_config(page_title="IA Leitora Amig√°vel", layout="wide")

st.title("üìä IA Leitora de Planilhas - Pontuar tech")
st.markdown("Siga os passos: 1Ô∏è‚É£ Carregue sua planilha ‚Üí 2Ô∏è‚É£ Fa√ßa sua pergunta ‚Üí 3Ô∏è‚É£ Veja e ou√ßa a resposta!")

# -----------------------------
# Sess√£o de hist√≥rico e contadores
# -----------------------------
if "historico" not in st.session_state:
    st.session_state["historico"] = []

if "respostas_uteis" not in st.session_state:
    st.session_state["respostas_uteis"] = 0

if "nao_util" not in st.session_state:
    st.session_state["nao_util"] = False

# -----------------------------
# Upload da planilha
# -----------------------------
uploaded_file = st.file_uploader("üìÇ Carregue sua planilha Excel (.xlsx)", type=["xlsx"])

if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("‚úÖ Planilha carregada com sucesso!")
    except Exception:
        st.error("‚ùå N√£o foi poss√≠vel ler o arquivo. Certifique-se de que √© um .xlsx v√°lido.")
        st.stop()

    # -----------------------------
    # FAQ na barra lateral
    # -----------------------------
    st.sidebar.title("‚ùì Perguntas Frequentes")
    perguntas_frequentes = [
        "Qual foi o gasto mais alto?",
        "Qual √© a m√©dia de gastos?",
        "Qual √© o gasto mais baixo?",
        "Resumo geral da planilha",
        "Qual produto/vendedor mais gerou gasto?"
    ]
    for p in perguntas_frequentes:
        if st.sidebar.button(p):
            st.session_state["pergunta"] = p

    # Bot√£o de limpar hist√≥rico
    if st.sidebar.button("üóë Limpar Hist√≥rico"):
        st.session_state["historico"] = []
        st.session_state["respostas_uteis"] = 0
        st.success("‚úÖ Hist√≥rico limpo!")

    st.sidebar.metric("Respostas √∫teis", st.session_state["respostas_uteis"])

    # -----------------------------
    # Caixa de pergunta
    # -----------------------------
    pergunta = st.text_input("üí¨ Fa√ßa sua pergunta:", st.session_state.get("pergunta", ""))
    tipo_resposta = st.radio("Escolha o tipo de resposta:", ["Resumo simples", "Detalhes adicionais"], index=0)

    if st.button("üîç Perguntar") and pergunta:
        resumo = df.describe(include="all").to_string()

        # Chamar IA
        resposta = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Voc√™ √© um assistente que explica dados de planilha de forma MUITO simples. "
                        "Gere duas respostas separadas:\n"
                        "1) Resumo simples: curto e direto para qualquer pessoa.\n"
                        "2) Detalhes adicionais: an√°lise completa, insights, compara√ß√µes, tend√™ncias e sugest√µes para tornar a resposta mais objetiva."
                    ),
                },
                {
                    "role": "user",
                    "content": f"Planilha resumida:\n{resumo}\nPergunta: {pergunta}"
                }
            ]
        )

        texto_completo = resposta.choices[0].message.content

        # Separar resumo e detalhes
        if "Resumo simples:" in texto_completo and "Detalhes adicionais:" in texto_completo:
            resumo_simples = texto_completo.split("Resumo simples:")[1].split("Detalhes adicionais:")[0].strip()
            detalhes = texto_completo.split("Detalhes adicionais:")[1].strip()
        else:
            resumo_simples = texto_completo
            detalhes = texto_completo

        resposta_final = resumo_simples if tipo_resposta == "Resumo simples" else detalhes

        # Mostrar resposta
        st.subheader("‚úÖ Resposta:")
        st.write(resposta_final)

        # Bot√µes de feedback
        st.subheader("Feedback da resposta")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëç Resposta √∫til"):
                st.session_state["respostas_uteis"] += 1
                st.success(f"Resposta marcada como √∫til! Total: {st.session_state['respostas_uteis']}")
                # Adicionar ao hist√≥rico
                st.session_state["historico"].append(
                    {"pergunta": pergunta, "resposta": resposta_final, "tipo": tipo_resposta, "util": True, "motivo": ""}
                )

        with col2:
            if st.button("üëé Resposta n√£o √∫til"):
                st.session_state["nao_util"] = True

        if st.session_state["nao_util"]:
            motivo = st.text_input("‚ùå Por favor, informe o motivo da resposta n√£o ser √∫til:")
            if motivo:
                st.warning("Obrigado pelo feedback! Registramos sua resposta.")
                st.session_state["historico"].append(
                    {"pergunta": pergunta, "resposta": resposta_final, "tipo": tipo_resposta, "util": False, "motivo": motivo}
                )
                st.session_state["nao_util"] = False

        # Leitura em voz
        tts = gTTS(text=resposta_final, lang='pt')
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            tts.save(fp.name)
            st.audio(fp.name, format="audio/mp3")

    # -----------------------------
    # Bot√µes para gr√°ficos e resumo visual
    # -----------------------------
    st.subheader("üìä Visualiza√ß√µes (Ainda em teste - Precisar se bem claro para funcionar)")
    col_graf, col_visual = st.columns(2)

    with col_graf:
        if st.button("üìà Gerar gr√°fico dos dados"):
            numeric_cols = df.select_dtypes(include="number").columns
            if len(numeric_cols) > 0:
                fig, ax = plt.subplots()
                df[numeric_cols].sum().sort_values().plot(kind="bar", ax=ax, color="skyblue")
                ax.set_ylabel("Valores")
                ax.set_title("Soma por coluna num√©rica")
                st.pyplot(fig)
            else:
                st.info("Nenhuma coluna num√©rica para mostrar gr√°fico.")

    with col_visual:
        if st.button("üé® Resumo visual simplificado"):
            numeric_cols = df.select_dtypes(include="number").columns
            if len(numeric_cols) > 0:
                fig, ax = plt.subplots()
                df[numeric_cols].mean().sort_values().plot(kind="bar", ax=ax, color="lightgreen")
                ax.set_ylabel("M√©dia por coluna")
                ax.set_title("Resumo visual simplificado")
                st.pyplot(fig)
                st.write("Esse gr√°fico mostra a m√©dia de cada coluna num√©rica da planilha de forma simples.")
            else:
                st.info("Nenhuma coluna num√©rica para gerar resumo visual.")

# -----------------------------
# Hist√≥rico de perguntas
# -----------------------------
if st.session_state.get("historico"):
    st.subheader("üìú Hist√≥rico de Perguntas (√∫ltimas 10)")
    for h in reversed(st.session_state["historico"][-10:]):
        st.markdown(f"**Pergunta:** {h['pergunta']}")
        st.markdown(f"**Tipo de resposta:** {h['tipo']}")
        st.markdown(f"**Resposta:** {h['resposta']}")
        if not h["util"]:
            st.markdown(f"**Motivo n√£o √∫til:** {h['motivo']}")
        st.markdown("---")
